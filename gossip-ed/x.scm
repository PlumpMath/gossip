(debug-enable 'debug)
(debug-enable 'backtrace)
(read-enable 'positions)
(read-set! keywords 'prefix)

(use-modules (gtk gtk) (oop goops))

(defmacro define-struct (name base-and-options . fields)
  (define (field-name f)
    (if (list? f) (car f) f))
  (define field-defaulted? list?)
  (define field-default cadr)
  (define (accessors)
    (map (lambda (f)
	   (symbol-append name '- (field-name f)))
	 fields))
  (define (field->slot f)
    (let ((fn (field-name f)))
      ;; XXX - keep synchronized with copy-struct below
      `(,fn :accessor ,(symbol-append name '- fn)
	    :init-keyword ,(symbol->keyword fn)
	    ,@(if (field-defaulted? f) 
		  `(:init-value ,(field-default f)) 
		  '()))))
  (let loop ((base '())
	     (bo base-and-options))
    (if (or (null? bo) (keyword? (car bo)))
	`(begin
	   ;; (export ,name ,@(accessors) ,(symbol-append name '?))
	   (define-class ,name ,(reverse! base) 
	     ,@(map field->slot fields)
	     ,@bo)
	   (define (,(symbol-append name '?) x) (is-a? x ,name)))
	(loop (cons (car bo) base) (cdr bo)))))

(define-struct gto-proplist ()
  (props '()) (vals '())
  max-rows widget (table #f) labels entries)

(define-method initialize ((p gto-proplist) args)
  (next-method)
  (set! (gto-proplist-widget p) (gtk-scrolled-window-new))
  (gtk-scrolled-window-set-policy (gto-proplist-widget p)
				  'automatic 'automatic)
  (make-proptable p 20))

(define (make-proptable p max-rows)
  (let ((t (gtk-table-new max-rows 2 #f))
	(ls (make-vector max-rows))
	(es (make-vector max-rows)))
    (gtk-table-set-col-spacing t 0 4)
    (do ((i 0 (1+ i)))
	((= i max-rows))
      (let ((l (gtk-label-new "foo"))
	    (e (gtk-entry-new)))
	(gtk-misc-set-alignment l 1.0 0.5)
	(vector-set! ls i l)
	(vector-set! es i e)
	(gtk-table-attach-defaults t l 0 1 i (1+ i))
	(gtk-table-attach-defaults t e 1 2 i (1+ i))))
    (set! (gto-proplist-max-rows p) max-rows)
    (set! (gto-proplist-table p) t)
    (set! (gto-proplist-labels p) ls)
    (set! (gto-proplist-entries p) es)
    (let ((v (gtk-vbox-new #f 0)))
      (gtk-box-pack-start v t #f #f 0)
      (gtk-scrolled-window-add-with-viewport (gto-proplist-widget p) v))))

(define (set-proptable-len p len)
  (do ((i 0 (1+ i)))
      ((= i (gto-proplist-max-rows p)))
    (for-each (if (< i len) gtk-widget-show gtk-widget-hide)
	      (list (vector-ref (gto-proplist-labels p) i)
		    (vector-ref (gto-proplist-entries p) i)))))

(define (gto-proplist-set p props)
  (set! (gto-proplist-props p) props)
  (gto-proplist-update p))

(define (gto-proplist-update p)
  (let* ((props (gto-proplist-props p))
	 (len (length props)))
    (set-proptable-len p len)
    (do ((i 0 (1+ i))
	 (c props (cdr c)))
	((= i len))
      (gtk-label-set-text (vector-ref (gto-proplist-labels p) i) (caar c))
      (gtk-entry-set-text (vector-ref (gto-proplist-entries p) i) (cadar c)))))

(define (gto-proplist-commit p)
  (do ((i 0 (1+ i))
       (c (gto-proplist-props p) (cdr c)))
      ((null? c))
    (set-cdr! (car c) 
	      (gtk-entry-get-text (vector-ref (gto-proplist-entries p) i)))))
  
(let* ((w (gtk-window-new 'toplevel))
       (v (gtk-vbox-new #f 2))
       (p (make gto-proplist))
       (b (gtk-button-new-with-label "Commit")))
  (gtk-box-pack-start v (gto-proplist-widget p))
  (gtk-box-pack-start v b #f #f 0)
  (gtk-container-add w v)
  (gtk-widget-show-all w)
  (gto-proplist-set p '(("foo" "1.2") ("bar" "\"hi\"") ("baz" "")))
  (gtk-signal-connect b "clicked"
		      (lambda ()
			(gto-proplist-commit p)
			(pk (gto-proplist-props p))))
  (gtk-standalone-main w))

  
